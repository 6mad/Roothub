<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

    <!-- 注意要在 web.xml 中扫描此配置文件 -->

    <!-- 读取错误提示属性文件，实现自定义提示。原文件位置 spring-security-core-4.2.3.RELEASE.jar 包中 org/springframework/security/messages_zh_CN.properties 
         可以将其内容拷贝到自定义的属性文件中，修改相关的提示信息，将 basenames 属性值指向自定义属性文件
    -->
    <!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames" value="classpath:org/springframework/security/messages_zh_CN"></property>
    </bean> -->

    <!-- security="none"：对指定的 URL 放行，不拦截。如一些静态文件。另外放行登录 URL 避免拦截，造成无法登录 -->
    <!-- <security:http security="none" pattern="/admin/login" /> -->

	<!-- 1.auto-config：是否自动配置过滤器，默认是 false
		 2.entry-point-ref：自定义认证切入点 -->
    <security:http auto-config="false" use-expressions="true" entry-point-ref="authenticationEntryPointServiceImpl">
        <!--
            1.login-page：表示自定义登录页面
            2.login-processing-url：表示登录时提交的地址
            3.username-parameter：表示登录时用户名使用的是哪个参数
            4.password-parameter：表示登录时密码使用的是哪个参数
            5.default-target-url：默认情况下，在登录成功后会返回到原本受限制的页面，
            					如果用户是直接请求登录页面，登录成功后默认情况下会跳转到当前应用的根路径，即欢迎页面。
            					default-target-url 属性可以指定，用户直接访问登录页面并登陆成功后跳转的页面。
            					如果想让用户不管是直接请求登录页面，还是通过 Spring Security 引导过来的，登录之后都跳转到指定的页面，
            					可以使用 always-use-default-target 属性为 true 来达到这一效果。
            6.authentication-success-handler-ref：对应一个 AuthencticationSuccessHandler 实现类的引用。
            					登录认证成功后会调用指定 AuthenticationSuccessHandler 的 onAuthenticationSuccess 方法，
            					在此方法中进行登陆成功后的处理，此时 default-target-url 属性失效。
            7.authentication-failure-url：指定登录认证失败后跳转的页面，默认情况下登录失败后会以重定向的方式返回登录页面。
            					请注意登录失败后跳转的页面，也需放行，否则又会被重定向到登录页面。
            8.authentication-failure-handler-ref：对应一个用于处理认证失败的 AuthenticationFailureHandler 实现类。
                				指定了该属性，Spring Security 在认证失败后会调用指定 AuthenticationFailureHandler 的 
                				onAuthenticationFailure 方法对认证失败进行处理。此时 authentication-failure-url 属性将不再发生作用。
         -->
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/login"
                             username-parameter="username"
                             password-parameter="password"
                             authentication-failure-handler-ref="authenticationFailureServiceImpl"
                             authentication-success-handler-ref="authenticationSuccessServiceImpl" />

        <security:logout logout-success-url="/login.jsp"
                        logout-url="/logout" 
                        invalidate-session="true" 
                        delete-cookies="JSESSIONID" />
		
		<!-- 放行登录 URL，避免拦截，造成无法登录 -->
		<security:intercept-url pattern="/login.jsp" access="permitAll()" />

        <!-- 设置访问所有的 URL 都必须登录 -->
        <!--<security:intercept-url pattern="/**" access="isAuthenticated()" />-->

        <!-- 
            access="hasRole('ROLE_ADMIN')"：表示拥有 ADMIN 角色的用户可以访问，否则 403。
                hasRole('ROLE_ADMIN') 为 SpEL 表达式，必须以 ROLE_ 开头
         -->
        <!-- <security:intercept-url pattern="/user/**" access="hasRole('ROLE_0')"/> -->

        <!-- 添加一个自定义的 handler，用来处理没有权限的请求。 -->
        <security:access-denied-handler ref="accessDeniedHandlerServiceImpl"/>

        <!-- 添加一个自定义的 filter，放在 FILTER_SECURITY_INTERCEPTOR 之前，实现用户、角色、权限、资源的动态管理。 -->
        <security:custom-filter ref="dynamicSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" />

        <security:session-management session-fixation-protection="none">
            <!-- 
                max-sessions="1"：同一用户只能在一个浏览器登录，当尝试在其他浏览器登陆时将被拒绝
                error-if-maximum-exceeded="true"：当设置了此属性，尝试在其他浏览器登录时，则原会话将被终止，将在新窗口建立新会话
            -->
            <security:concurrency-control max-sessions="1"/>
        </security:session-management>

        <security:csrf disabled="true" />
        
        <security:headers>
        	<!-- 允许同源域名嵌套 ifname 页面 -->
        	<security:frame-options policy="SAMEORIGIN"/>
        	<!-- 允许所有域名嵌套 ifname 页面 -->
        	<!-- <security:frame-options disabled="true"/> -->
    	</security:headers>
    </security:http>

    <!-- 配置认证管理器，当 UsernamePasswordAuthenticationFilter 拦截器拦截到用户的认证请求后，
   		  会调用认证管理器进行认证 -->
    <security:authentication-manager>
        <!-- 认证管理器会委托给认证提供者进行认证，所以还需要配置认证提供者，其中要指定用户服务接口 -->
        <security:authentication-provider user-service-ref="authenticationUserDetailsServiceImpl">
        	<!-- 使用自定义的对象对用户提交的密码进行加密操作 -->
            <security:password-encoder ref="authenticationMd5PasswordEncoderServiceImpl"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 自定义被认证请求向登录界面跳转采用forward方式 -->
   <!--  <bean id="myLoginUrlAuthenticationEntryPoint" 
    	class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
    	登录页的地址，注意放行登录页，否则会造成无限循环
    	<constructor-arg name="loginFormUrl" value="/admin/login"></constructor-arg>
    	采用forward方式跳转，默认是重定向
    	<property name="useForward" value="true"/>
    </bean> -->

    <!-- ============================================ 认证相关 start ============================================ -->
    <!-- 自定义认证成功处理类（可以不指定，spring security 有默认的实现） -->
    <bean id="authenticationSuccessServiceImpl" class="wang.miansen.roothub.auth.service.impl.AuthenticationSuccessServiceImpl"/>

    <!-- 自定义认证失败处理类（可以不指定，spring security 有默认的实现） -->
    <bean id="authenticationFailureServiceImpl" class="wang.miansen.roothub.auth.service.impl.AuthenticationFailureServiceImpl"/>

    <!-- 认证过程处理类（这个必须要指定） -->
    <bean id="authenticationUserDetailsServiceImpl" class="wang.miansen.roothub.auth.service.impl.AuthenticationUserDetailsServiceImpl"/>

    <!-- 使用自定义的对象对用户提交的密码进行加密操作 -->
    <bean id="authenticationMd5PasswordEncoderServiceImpl" class="wang.miansen.roothub.auth.service.impl.AuthenticationMd5PasswordEncoderServiceImpl"/>
    <!-- ============================================ 认证相关 end ============================================ -->

    <!-- ============================================ 鉴权相关 start ============================================ -->
    <!-- 自定义身份验证入口点（用户没有权限并且是未认证状态） -->
    <bean id="authenticationEntryPointServiceImpl" class="wang.miansen.roothub.gateway.service.impl.AuthenticationEntryPointServiceImpl"/>

    <!-- 自定义拒绝访问处理类（用户没有权限并且是已认证状态） -->
    <bean id="accessDeniedHandlerServiceImpl" class="wang.miansen.roothub.gateway.service.impl.AccessDeniedHandlerServiceImpl"/>

    <!-- 权限数据提供者 -->
    <bean id="securityMetadataProviderServiceImpl" class="wang.miansen.roothub.gateway.service.impl.SecurityMetadataProviderServiceImpl"/>

    <!-- 动态权限数据源 -->
    <bean id="dynamicSecurityMetadataSource" class="wang.miansen.roothub.gateway.DynamicSecurityMetadataSource"/>

    <!-- 动态权限决策管理器，用于判断用户是否有访问权限。 -->
    <bean id="dynamicAccessDecisionManager" class="wang.miansen.roothub.gateway.DynamicAccessDecisionManager"/>

    <!-- 动态权限拦截器，用于实现基于 URL 的动态权限过滤。 -->
    <bean id="dynamicSecurityInterceptor" class="wang.miansen.roothub.gateway.filter.DynamicSecurityInterceptor"/>

    <!-- 初始化匿名用户的主体信息和角色权限信息 -->
    <bean id="anonymousAuthenticationFilterProcessor" class="wang.miansen.roothub.gateway.AnonymousAuthenticationFilterProcessor"/>
    <!-- ============================================ 鉴权相关 end ============================================ -->

</beans>